{"version":3,"sources":["img/slack-menu.jpg","img/add-to-slack.jpg","img/comic-slack.png","components/Use.js","components/Setup.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","re","RegExp","Use","props","state","value","comicsansified","disabled","handleChange","bind","handleSubmit","convertIt","str","this","cstr","i","len","length","test","setState","e","target","toLowerCase","copied","preventDefault","id","onSubmit","htmlFor","className","onChange","rows","text","onCopy","type","role","aria-label","to","href","smooth","duration","Component","zipPath","process","Setup","download","rel","src","imgMenu","alt","imgAddToSlack","App","logo","width","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.14fa496e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/slack-menu.c9ba6021.jpg\";","module.exports = __webpack_public_path__ + \"static/media/add-to-slack.574364be.jpg\";","module.exports = __webpack_public_path__ + \"static/media/comic-slack.ee7b5459.png\";","import React, { Component, Fragment } from 'react';\n//import { Link } from 'react-router-dom';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nimport { Link } from 'react-scroll';\n\nconst re = new RegExp('[a-zA-Z0-9]');\n\nclass Use extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      comicsansified: '',\n      disabled: true,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.convertIt = this.convertIt.bind(this);\n  }\n\n  convertIt() {\n    const str = this.state.value;\n    let cstr = '';\n\n    for (var i = 0, len = str.length; i < len; i++) {\n      //0-9 and a-z (either case)\n      if (re.test(str[i])) {\n        cstr += `:cs-${str[i]}:`;\n\n        //We also have emojis for some of the more common symbols...\n        //The following is a bit yuck, but emoji filenames can't\n        //contain special characters so we have to make some stuff up.\n      } else if (str[i] === ' ') {\n        cstr += ':cs-s-sp:';\n      } else if (str[i] === '?') {\n        cstr += ':cs-s-qm:';\n      } else if (str[i] === '!') {\n        cstr += ':cs-s-em:';\n      } else if (str[i] === '&') {\n        cstr += ':cs-s-amp:';\n      } else if (str[i] === '@') {\n        cstr += ':cs-s-at:';\n      } else if (str[i] === ',') {\n        cstr += ':cs-s-com:';\n      } else if (str[i] === '$') {\n        cstr += ':cs-s-dol:';\n      } else if (str[i] === '.') {\n        cstr += ':cs-s-fs:';\n      } else if (str[i] === '#') {\n        cstr += ':cs-s-hash:';\n      } else if (str[i] === '%') {\n        cstr += ':cs-s-pc:';\n      } else {\n        cstr += str[i];\n      }\n    }\n    this.setState({ comicsansified: cstr });\n\n    str === ''\n      ? this.setState({ disabled: true })\n      : this.setState({ disabled: false });\n  }\n\n  handleChange(e) {\n    const value = e.target.value.toLowerCase();\n    this.setState(\n      {\n        copied: false,\n        value,\n      },\n      () => {\n        this.convertIt();\n      }\n    );\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n  }\n\n  render() {\n    const { comicsansified, disabled, copied } = this.state;\n    return (\n      <Fragment>\n        <h2>Use Comic Sans in slack! (sort of)</h2>\n        <form id=\"cs-form\" onSubmit={this.handleSubmit}>\n          <label htmlFor=\"cs-content\" className=\"m_b_sm\">\n            Your message:\n          </label>\n          <textarea\n            id=\"cs-content\"\n            className=\"m_b_md\"\n            onChange={this.handleChange}\n            rows=\"5\"\n          />\n          <CopyToClipboard\n            text={comicsansified}\n            onCopy={() => this.setState({ copied: true })}\n          >\n            <input\n              type=\"submit\"\n              value=\"Copy as Comic Sans\"\n              disabled={disabled}\n            />\n          </CopyToClipboard>\n\n          {copied && (\n            <div className=\"copied-alert\">\n              <span role=\"img\" aria-label=\"yay emoji\">\n                ðŸŽ‰\n              </span>\n              <strong>Copied!</strong> Now paste it into a Slack message\n            </div>\n          )}\n        </form>\n        <p className=\"text-sm\">\n          <strong>Heads up!</strong> Your slack team's account will need to have\n          had the emojis added for this to work. See the{' '}\n          <Link to=\"setup\" href=\"#\" smooth={true} duration={300}>\n            setup\n          </Link>{' '}\n          section.\n        </p>\n      </Fragment>\n    );\n  }\n}\n\nexport default Use;\n","import React, { Component, Fragment } from 'react';\n//import { Link } from 'react-router-dom';\nimport { Link } from 'react-scroll';\n\nimport imgMenu from '../img/slack-menu.jpg';\nimport imgAddToSlack from '../img/add-to-slack.jpg';\n\nconst zipPath = `${process.env.PUBLIC_URL}/files/`;\n\nclass Setup extends Component {\n  render() {\n    return (\n      <Fragment>\n        <section>\n          <header>\n            <h2 className=\"m_t_0\">How it works</h2>\n          </header>\n          <div>\n            <p className=\"m_t_0\">\n              Basically, we'll add a bunch of Comic Sans characters as images to\n              your custom emoji list in Slack. Then you can use the{' '}\n              <Link to=\"compose\" href=\"#\" smooth={true} duration={500}>\n                message composer\n              </Link>{' '}\n              to convert your boring text into glorious Comic Sans.\n            </p>\n            <p>\n              Follow the setup guide below and you'll be impressing your\n              colleagues in no time.\n            </p>\n          </div>\n        </section>\n\n        <section>\n          <header>\n            <h3 className=\"m_t_0 m_b_sm\">Step 1.</h3>\n            <h2 className=\"m_t_0\">Get the 'emojis'</h2>\n          </header>\n          <div>\n            <p className=\"m_t_0\">\n              <a href={`${zipPath}characters.zip`} download>\n                &#11015; Download the images\n              </a>{' '}\n              (zip, 70KB).\n            </p>\n            <p>Unzip it.</p>\n          </div>\n        </section>\n\n        <section>\n          <header>\n            <h3 className=\"m_t_0 m_b_sm\">Step 2.</h3>\n            <h2 className=\"m_t_0\">Enable bulk emoji uploading</h2>\n          </header>\n          <div>\n            <p className=\"m_t_0\">\n              Add the{' '}\n              <a\n                href=\"https://chrome.google.com/webstore/detail/slack-emoji-tools/anchoacphlfbdomdlomnbbfhcmcdmjej\"\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                Slack Emoji Tools\n              </a>{' '}\n              Chrome extension.\n            </p>\n            <p>This will make step 3 a breeze.</p>\n          </div>\n        </section>\n\n        <section>\n          <header>\n            <h3 className=\"m_t_0 m_b_sm\">Step 3.</h3>\n            <h2 className=\"m_t_0\">Add the emojis to Slack</h2>\n          </header>\n          <div>\n            <p className=\"m_t_0\">Go to the 'Customize Slack' screen:</p>\n            <img src={imgMenu} alt=\"Menu showing link to Customize Slack\" />\n            <p>\n              The Chrome extension you just added should have enable a bulk\n              upload area on this screen. Simply drag and drop the contents of\n              the 'characters' folder.\n            </p>\n            <img src={imgAddToSlack} alt=\"Bulk adding emojis.\" />\n          </div>\n        </section>\n\n        <section>\n          <h2 className=\"m_t_0\">Profit</h2>\n          <div>\n            <p className=\"m_t_0\">\n              You're ready to Slack in style. Head over to the{' '}\n              <Link to=\"compose\" href=\"#\" smooth={true} duration={500}>\n                message composer\n              </Link>{' '}\n              and type your message.\n            </p>\n          </div>\n        </section>\n\n        <section>\n          <header>\n            <h2 className=\"m_t_0\">Known issues</h2>\n          </header>\n          <div>\n            <ul className=\"m_t_0\">\n              <li>\n                Comic Slack uses images, not a font. So you can forget about\n                kerning.\n              </li>\n              <li>\n                I've had to remove transparency from each image so that they are\n                still readable with Slack's dark mode.\n              </li>\n              <li>\n                Comic Slack currently only supports a-z, 0-9 and a small\n                selection of the most common symbols. Any other characters you\n                type will render in whatever garbage font Slack usually uses ;)\n              </li>\n            </ul>\n          </div>\n        </section>\n      </Fragment>\n    );\n  }\n}\n\nexport default Setup;\n","import React, { Component, Fragment } from 'react';\n//import { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport Use from './components/Use';\nimport Setup from './components/Setup';\n\nimport 'sanitize.css';\nimport './css/styles.scss';\nimport logo from './img/comic-slack.png';\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <header className=\"header\">\n          <img src={logo} alt=\"Comic Slack logo\" width=\"50\" />\n          <div>\n            <h1 className=\"m_t_0 m_b_0\">Comic Slack</h1>\n          </div>\n        </header>\n\n        <main>\n          <div id=\"compose\" className=\"use-wrap wrapper\">\n            <Use />\n          </div>\n          <div id=\"setup\" className=\"setup-wrap wrapper\">\n            <Setup />\n          </div>\n        </main>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}